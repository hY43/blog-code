



1. jdk8, jdk11, jdk15 버전별 중요 feature 정리
- jdk 8
    - Lambda : 익명 클래스의 한개 메소드를 식으로 표한한 것을 말합니다.
    - Stream API : 컬렉션과 같은 연속된 
    - default method : interface에서 default method로 기본으로 제공할 method를 구현할 수 있습니다.
    - PermGen 영역 제거 : PermGen 영역의 사이즈 제한으로 인한 OutOfMemoryError  에러에 대한 보완을 위해 PermGen 영역을 제거하고 이를 대체하기 위한 공간으로 Metaspace를 추가하였습니다.
- jdk 11
    - 람다 매개변수와 지역변수에 대해 var 키워드를 사용하여 변수 선언이 가능해졌습니다.
    var를 사용하게 되면 입력되는 값에 따라 타입을 유추합니다.
    - Z Garbage Collector, ZGC 도입(실험) : 그 특징으로는 Concurrent GC에 해당함 따라서 애플리케이션 실행중에도 동작하기 때문에 응답시간에 큰 영향이 없음.
- jdk 15
    - Z Garbage Collector, ZGC 도입

2. Generics / Wildcard generics 의 차이점과 어떻게 사용하는지?
- generic의 경우, 타입을 정확하게 명시했다면 wildcard generic은 타입을 generic을 통해 명확하게 명시할 수 없는 경우에 사용합니다.
예를 들어 금융 상품이라는 클래스는 내부적으로 채권, 주식, 수익증권 참조 타입에 대한 generic을 지원하도록 되어있는데, 만약에 타 클래스에서 이 금융 상품을 매개 변수로 받는 메소드를 생성한다고 했을때 
public double calAbkAmt(Product<Bond> product) 와 같이 선언을 해버리면 채권(Bond)만 매개변수로 받을 수 있는 상황이 발생합니다.
이러한 경우에 Proudct<?> 를 사용하여 보다 다양한 타입을 지원하는 메소드로 구현을 할 수 있습니다.

3. ArrayList 의 기본 크기는 10입니다. 10개의 데이터가 이미 꽉 찬 list 에 11번째 데이터를 추가하면 어떤 일이 벌어지는 지 확인
- ArrayList는 꽉찬 상태에서 데이터를 추가로 add 하게 되면 기존의 ArrayList를 사용하는게 아니라, 1이 증가된 사이즈의 array 를 생성하여 기존의 값을 새롭게 생성된 array에 복사합니다.
중간에 추가되는 경우에도 새롭게 array를 생성하여 순서에 맞게 기존 값과 새롭게 추가되는 값을 복사합니다.
이에 반해 LinkedList 는 array가 아니라 자신의 앞과 뒤의 요소만의 정보를 갖고 있어, 중간에 추가되거나 새롭게 추가되는 부분에 대해 새롭게 array를 생성하는 것이 아니라 이 노드 정보만 수정해주는 것으로 데이터의 추가가 가능합니다.

4. HashMap은 어떻게 구현되어있길래 키가 hash 충돌이 안일어나는가?
- HashMap은 회피 알고리즘 중 Separate Chaining을 사용하고 있습니다.
이 Separate Chaining은 LinkedList를 사용하여 버킷 값을 시작점으로 하는 LinkedList를 생성합니다.
또다른 방법인 open addressing을 사용하지 않고 Separate Chaining을 사용한 이유는 데이터가 커지면 커질 수록 각 데이터에 접근하는 속도와 같은 성능상의 차이가 나기 때문입니다.
추가로 Java 8로 넘어오면서 Separate Chaining은 내부적으로 성능 개선을 위해 해시 버킷에 할당된 key, value 쌍이 8개 이상이면 LinkedList를 Tree구조로 변경하여 사용하도록 구현이 되었습니다.

5. HashMap vs HashTable vs ConcurrentHashMap 차이와 어떨때 사용하는지?
- 우선 크게 보자면 HashTable과 ConcurrentHashMap은 Thread Safe하고 HashMap은 Thread Safe하지 않다라고 할 수 있습니다.
그리고 HashTable 과 ConcurrentHashMap 는 똑같이 Thread Safe를 지원하기는 하나, 범위의 차이가 있다고 할 수 있습니다.
구현된 소스를 확인해보면 HashTable은 메소드 단위로 synchronized 를 사용하여 한개 Thread가 접근하면 다른 Thread는 해당 메소드에 접근할 수 없도록 구현이 된 반면에 ConcurrentHashMap은 메소드가 아니라 그 시점에 사용하고 있는 node에 synchronized를 붙여서 각 요소 별로 접근을 할 수 없도록 만들어 성능을 향상시켰다고 볼 수 있습니다.

6. GC 종류와 JDK 별 default GC가 어떻게 되나요?
7. GC 로 인한 Stop-the-world 현상은 왜 발생할까? 발생 시 어떤 문제가 생기는지?
8. thread / process 차이와 Thread는 애초에 왜 써야할까요?
process는 운영체제로부터 할당받은 작업단위, 프로그램이라고 할 수 있습니다.
운영체제로부터 할당받기 때문에 그 성능은 운영체제의 영향을 받습니다.
그에 반해 thread는 한개의 process를 처리하기 위해 생성하는 작업단위이기 때문에
process에게 자원을 할당받아 작업을 진행합니다.
그러므로 한개 process 내의 thread는 같은 자원을 공유한다고 볼 수 있습니다.
그래서 thread를 사용하는 이유는 한개의 process를 처리하기 위해 작업을 나누어서 동시에 처리하기 위함이라고 할 수 있습니다.

9. IO/NIO/NIO2 차이와 어떨때 사용하는지?
- IO
    - 최초의 입출력 방식으로 Stream을 사용함.
    - InputStream, OutputStream, Reader, Writer
- NIO
    - New IO의 약어로 기존의 방식이 아닌 Channel과 Buffer를 사용하여 입출력을 합니다.
    - IO 대상에 대해 Channel을 열고 Buffer에 내용을 써서 Channel에 넘기면 알아서 그 후속작업을 하도록 간편화되었습니다. 반대로 읽기 역시 Channel을 통해 간편하게 사용할 수 있도록 개선되었습니다.
- NIO2
    - 기존에 사용되던 File 클래스를 보완한 Files 클래스가 추가되었으며 그외에도 File과 관련된 많은 기능이 개선되었습니다.
10. TCP/UDP 차이와 connection pool 왜 쓰는지?
- TCP는 3-way handshake 라는 패킷을 주고 받는 과정을 통해서 보낸 정보에 대해서 정확하게 도착했는지 응답까지 받기 때문에, 데이터 전달에 대한 신뢰도를 확보할 수 있으나,
UDP는 수신자 쪽에서 받았는지는 중요하지 않고 데이터를 전송하고 끝내기 때문에 신뢰도가 없다고 할 수 있습니다. 다만 응답 확인 없이 전송만 하고 끝나기 때문에 속도가 빠르다고 할 수 있습니다.

- Connection Pool은 기존에 정의한 수대로 Connection을 미리 만들어두면 각각의 Connection마다 다른 Connection을 사용하기 때문에 서로 간의 영향이 없고 대기 시간이 없기 때문에 대기 시간이 짧다는 장점이 있으나 Pool에 너무 많은 Connection을 할당해두면 과도한 Connection이 발생하여 오히려 성능 상의 문제가 발생할 수도 있습니다.